<?xml version="1.0" encoding="UTF-8"?>
<!-- This file generated by Sakai App Builder -->
<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee  http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd" 
		version="2.4">
	<display-name>sakai-assignment2</display-name>
	<description>Sakai Assignment2</description>

<!-- CONFIG This is the name of the "punch-through" URL which will access the
    servlet directly bypassing the Sakai request filter. Paths beginning with
    / will be considered RELATIVE TO THE FIRST SLASH APPEARING IN THE REQUEST
    URL. Other paths will be considered as absolute URLS. 
    THIS MUST AGREE WITH THE DEPLOYED WEBAPP NAME, i.e. the artifactId of this
    tool, where the Sakai plugin build was used.
    -->
  <context-param>
    <param-name>resourceurlbase</param-name>
    <param-value>/sakai-assignment2-tool/</param-value>
  </context-param>

 <!-- Configure standard Spring application contexts. Be sure to mention
    rsf config files first, so any overrides may be processed. The first two
    config files are loaded from inside the rsfutil.jar  -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:conf/rsf-config.xml,
			classpath:conf/blank-applicationContext.xml,
			classpath:conf/sakai-applicationContext.xml,
			classpath:conf/components-applicationContext.xml,
			classpath:conf/sakaiComponents-applicationContext.xml,
			classpath:conf/sakai-entitybroker-applicationContext.xml,
			/WEB-INF/applicationContext.xml
		</param-value>
		<!--  classpath:webapp/WEB-INF/bundle-applicationContext.xml, -->
	</context-param>

  <!-- Configure "request scope" Spring application contexts (RSAC).
    Be sure to mention rsf config files first, so any overrides may be
    processed. -->
	<context-param>
		<param-name>requestContextConfigLocation</param-name>
		<param-value>
			classpath:conf/rsf-requestscope-config.xml,
			classpath:conf/blank-requestContext.xml,
			classpath:conf/sakai-requestContext.xml,
			classpath:conf/components-requestContext.xml,
			classpath:conf/sakaiComponents-requestContext.xml,
			classpath:conf/sakai-entitybroker-requestContext.xml,
			/WEB-INF/requestContext.xml
		</param-value>
	</context-param>

	<!-- Sakai request filter -->
<!--
    The Sakai Request Handler - standard stanza. Do NOT apply the sakai 
    request filter to anything that falls outside the "mapped path", in this
    instance, /faces/*. Anything that falls outside this path (interpreted
    as a resource URL) will be handled directly by the container (Tomcat).
  -->
  	<!--
	<filter>
		<filter-name>sakai.request</filter-name>
		<filter-class>org.sakaiproject.assignment2.tool.filters.LandingPageFilter</filter-class>
	</filter>
	-->
	<filter>
	    <filter-name>sakai.request</filter-name>
	    <filter-class>org.sakaiproject.util.RequestFilter</filter-class>
	</filter>

	<filter-mapping>
	    <filter-name>sakai.request</filter-name>
	    <!-- <url-pattern>/faces/*</url-pattern> -->
	    <servlet-name>sakai.assignment2</servlet-name>
	    <dispatcher>REQUEST</dispatcher>
	    <dispatcher>FORWARD</dispatcher>
	    <dispatcher>INCLUDE</dispatcher>
	</filter-mapping>

	<filter-mapping>
	    <filter-name>sakai.request</filter-name>
	    <!-- <url-pattern>/sdata/*</url-pattern> -->
	    <servlet-name>ControllerServlet</servlet-name>
	    <dispatcher>REQUEST</dispatcher>
	    <dispatcher>FORWARD</dispatcher>
	    <dispatcher>INCLUDE</dispatcher>
	</filter-mapping>

	<!-- Sakai listeners -->
	<listener>
		<listener-class>org.sakaiproject.util.ToolListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.sakaiproject.util.ContextLoaderListener</listener-class>
	</listener>

	<!-- tool servlet -->
	<servlet>
		<!-- servlet name must match tool.id in tools xml file -->
		<servlet-name>sakai.assignment2</servlet-name>
		<servlet-class>uk.ac.cam.caret.sakai.rsf.servlet.ReasonableSakaiServlet</servlet-class>
	</servlet>

	<!-- sdata servlet -->
	<servlet>
		<servlet-name>ControllerServlet</servlet-name>
		<servlet-class>org.sakaiproject.sdata.tool.ControllerServlet</servlet-class>
		<init-param>
		<!--
			classname is the name of the Handler
			baseurl is the first path element that maps to the handler
		-->
			<param-name>config</param-name>
			<param-value> 
				1.classname=org.sakaiproject.assignment2.tool.handlers.AssignmentListHandler;
				1.baseurl=/asnnList;
				2.classname=org.sakaiproject.assignment2.tool.handlers.SubmissionListHandler;
				2.baseurl=/subList;
				3.classname=org.sakaiproject.assignment2.tool.handlers.NewAsnn1Handler;
				3.baseurl=/newAsnn1;
				4.classname=org.sakaiproject.assignment2.tool.handlers.NewAsnn2Handler;
				4.baseurl=/newAsnn2;
				5.classname=org.sakaiproject.assignment2.tool.handlers.NewAsnn3Handler;
				5.baseurl=/newAsnn3;
				6.classname=org.sakaiproject.assignment2.tool.handlers.SubmissionHandler;
				6.baseurl=/subView;
				7.classname=org.sakaiproject.assignment2.tool.handlers.LanguageHandler;
				7.baseurl=/l;
				8.classname=org.sakaiproject.assignment2.tool.handlers.AssignmentPost;
				8.baseurl=/asnnPost;
				9.classname=org.sakaiproject.assignment2.tool.handlers.AssignmentDraft;
				9.baseurl=/asnnDraft;
			</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>sakai.assignment2</servlet-name>
		<url-pattern>/faces/*</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>ControllerServlet</servlet-name>
		<url-pattern>/sdata/*</url-pattern>
	</servlet-mapping>

</web-app>